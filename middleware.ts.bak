import { NextResponse } from "next/server"
import type { NextRequest } from "next/server"
import { verifyJWT } from "./lib/auth"

export async function middleware(request: NextRequest) {
  const token = request.cookies.get("token")?.value
  const pathname = request.nextUrl.pathname

  // Public routes that don't require authentication
  if (pathname === "/login" || pathname === "/") {
    if (token) {
      try {
        const payload = await verifyJWT(token)
        if (payload) {
          // If user is already logged in, redirect based on role
          const role = payload.role as string
          if (role === "admin") {
            return NextResponse.redirect(new URL("/admin", request.url))
          } else if (role === "teacher") {
            return NextResponse.redirect(new URL("/teacher", request.url))
          } else if (role === "student") {
            return NextResponse.redirect(new URL("/student", request.url))
          }
        }
      } catch (error) {
        // Invalid token, clear it and continue to login page
        const response = NextResponse.next()
        response.cookies.delete("token")
        return response
      }
    }
    return NextResponse.next()
  }

  // Protected routes that require authentication
  if (
    pathname.startsWith("/admin") ||
    pathname.startsWith("/teacher") ||
    pathname.startsWith("/student") ||
    pathname.startsWith("/api")
  ) {
    if (!token) {
      return NextResponse.redirect(new URL("/login", request.url))
    }

    try {
      const payload = await verifyJWT(token)
      if (!payload) {
        // Invalid token, redirect to login
        const response = NextResponse.redirect(new URL("/login", request.url))
        response.cookies.delete("token")
        return response
      }

      const role = payload.role as string

      // Role-based access control
      if (pathname.startsWith("/admin") && role !== "admin") {
        return NextResponse.redirect(new URL("/login", request.url))
      }
      if (pathname.startsWith("/teacher") && role !== "teacher") {
        return NextResponse.redirect(new URL("/login", request.url))
      }
      if (pathname.startsWith("/student") && role !== "student") {
        return NextResponse.redirect(new URL("/login", request.url))
      }

      return NextResponse.next()
    } catch (error) {
      // Error verifying token, redirect to login
      const response = NextResponse.redirect(new URL("/login", request.url))
      response.cookies.delete("token")
      return response
    }
  }

  return NextResponse.next()
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    "/((?!_next/static|_next/image|favicon.ico).*)",
  ],
}
