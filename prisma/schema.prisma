generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  name           String
  username       String           @unique
  email          String
  register       String?
  role           String
  className      String?
  subject        String?
  password       String
  status         String
  createdAt      DateTime         @default(now()) @map("createdat")
  Exam           Exam[]
  Notification   Notification[]
  Result         Result[]
  assignedExams  ExamAssignment[]
  questions      Question[]
  updatedResults ResultHistory[]  @relation("UserUpdatedResults")

  @@map("user")
}

model Subject {
  id   String @id @default(uuid())
  name String @unique

  @@map("subject")
}

model Exam {
  id          String          @id @default(uuid())
  title       String
  description String?
  subject     String
  subjectType String?
  className   String?
  duration    Int             @default(30)
  totalPoints Int             @default(100)
  examDate    DateTime?
  examTime    String?
  createdAt   DateTime        @default(now()) @map("createdat")
  userId      String          @map("userid")
  user        User            @relation(fields: [userId], references: [id])
  assignedTo  ExamAssignment[]
  Result      Result[]

  examQuestions ExamQuestion[] // ← many-to-many холбоо

  @@map("exam")
}


model ExamAssignment {
  id          String    @id @default(uuid())
  examId      String    @map("examid")
  userId      String    @map("userid")
  status      String    @default("PENDING") // PENDING, COMPLETED, MISSED
  createdAt   DateTime  @default(now()) @map("createdat")
  completedAt DateTime?
  exam        Exam      @relation(fields: [examId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([examId, userId])
  @@map("exam_assignment")
}

model Question {
  id            String @id @default(uuid())
  text          String
  type          String 
  points        Int    @default(1)
  options       Json?
  correctAnswer Json?
  className     String?
  category      String?
  difficulty    String?
  isInBank      Boolean @default(true)
  createdAt     DateTime @default(now()) @map("createdat")

  userId        String   @map("userid")
  createdBy     User     @relation(fields: [userId], references: [id])

  examQuestions ExamQuestion[] // ← many-to-many холбоо

  @@map("question")
}

model ExamQuestion {
  id         String   @id @default(uuid())
  exam       Exam     @relation(fields: [examId], references: [id])
  examId     String   @map("examid")
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @map("questionid")

  @@unique([examId, questionId])
  @@map("exam_question")
}


model Notification {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now()) @map("createdat")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("userid")

  @@map("notification")
}

model Result {
  id           String   @id @default(uuid())
  score        Float
  earnedPoints Int?
  totalPoints  Int?
  answers      Json?
  startedAt    DateTime?             
  submittedAt  DateTime @default(now())
  createdAt    DateTime @default(now()) @map("createdat")
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @map("userid")
  exam         Exam     @relation(fields: [examId], references: [id])
  examId       String   @map("examid")

  histories ResultHistory[]
}


model ResultHistory {
  id            String   @id @default(uuid())
  resultId      String
  updatedById   String
  previousScore Float
  newScore      Float
  updatedAt     DateTime @default(now())

  result    Result @relation(fields: [resultId], references: [id])
  updatedBy User   @relation(fields: [updatedById], references: [id], name: "UserUpdatedResults")
}
